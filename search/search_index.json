{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#installation","title":"Installation","text":"<p>First command is optional if <code>pip</code> is already up-to-date. <pre><code>python -m pip install --upgrade pip\npip install libpybee\n</code></pre></p>"},{"location":"#musicbee-settings-requirements-and-disclaimers","title":"MusicBee settings requirements and Disclaimers","text":"<ul> <li>To use this package, you need to enable MusicBee to export the library in XML format for iTunes (<code>Edit</code> &gt; <code>Edit Preferences</code> &gt; <code>Library</code>), as shown in the image below.</li> </ul> <ul> <li>The file should end up in the same place as your library's <code>.mbl</code> file.</li> <li>The language in which this file is exported depends on the language set in MusicBee. For the time being, this package will only support library XML files written in English, so you'll need to set MusicBee's language to English (<code>Edit</code> &gt; <code>Edit Preferences</code> &gt; <code>General</code>). \"English (US)\" is recommended.</li> <li>Before using <code>libpybee</code>, it is also recommended to back up / to copy this XML file associated to your MusicBee Library elsewhere. I cannot guarantee at this time that no damage will occur to your file while using the package.</li> <li>Runs on Python 3.8 and above.</li> </ul>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>All contributors from the legacy project <code>libpytunes</code> are listed here.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#020-30-aug-2024","title":"0.2.0 - 30 Aug 2024","text":"<p>New playlist folder handling and few documentation changes.</p> <p>docs(workflow): New GH Action for CHANGELOG generation. by @Dyl-M in #12 docs(GH Pages): Init. GH Pages for documentation by @Dyl-M in #13 \ud83d\udcc4 \"I ain't reading all that\" (you should tho). by @Dyl-M in #14 \ud83d\udd8c\ufe0f Wait, that's it? by @Dyl-M in #15 \ud83d\udcc1 Thanks to someone, I discover playlist folders by @Dyl-M in #16 \ud83d\udcc4 Documentation - v0.2.0 by @Dyl-M in #17</p>"},{"location":"changelog/#011-20-aug-2024","title":"0.1.1 - 20 Aug 2024","text":"<p>Fix regarding the \"Grouping\" tag, not used by everyone on every track. See the following MR for details.</p> <p>\ud83c\udff7\ufe0f Not everyone uses the \u201cGrouping\u201d tag... by @Dyl-M in #11</p>"},{"location":"changelog/#010-20-aug-2024","title":"0.1.0 - 20 Aug 2024","text":"<ul> <li>This is the very first version of the project, with the first test publication on PyPi.</li> <li>Most of the major changes between <code>libpytunes</code> and this publication have been made with the following merge: </li> </ul> <p>\ud83d\udc1d\ud83d\udc0d This is the beginning. by @Dyl-M in #6</p>"},{"location":"license/","title":"The MIT License (MIT)","text":"<p>Copyright \u00a9 2014-2024 Liam KAUFMAN Copyright \u00a9 2024 Dylan MONFRET</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"usage/","title":"Usage","text":"<p>Overview of the possibilities offered by <code>libpybee</code> and its various features.</p> <p>Keep in mind that the <code>Library</code> class is central to working with your MusicBee library. It provides access to tracks and playlists easily.</p>"},{"location":"usage/#display-all-library-tracks","title":"Display all library tracks","text":"<p>This example shows how to iterate over all tracks in the library and print out basic information for each track.</p> <pre><code>import libpybee\n\nMY_LIBRARY = libpybee.Library(\"iTunes Library.xml\")\n\n# Use `tracks` attribute, the dictionary containing each track from MusicBee, to iterate over them.\nfor track in MY_LIBRARY.tracks.values():\n    print(track)  # Output: [track.id] {track.artist} - {track.title}\n</code></pre> <p>\ud83d\udcc4 References: <code>Library</code>, <code>Track</code></p>"},{"location":"usage/#get-all-tracks-mentioning-a-specified-artists","title":"Get all tracks mentioning a specified artists","text":"<p>This example shows how to retrieve each tracks where a specific artist is mentioned.</p> <pre><code>import libpybee\n\nMY_LIBRARY = libpybee.Library(\"iTunes Library.xml\")\n\ntarget_artist = 'RetroVision'  # Looking for RetroVision's release in my MusicBee library\n\n# Iterating over tracks and looking for 'RetroVision' in `artist_list` for each of them\nretro_tracks = [track for track in MY_LIBRARY.tracks.values() if target_artist in track.artist_list]\n\nprint(retro_tracks)  # Output: list of Track object\n\nfor retro_t in retro_tracks:\n    print(retro_t.title)  # Output: Each RetroVision's tracks name, featuring and remixes included\n</code></pre> <p>\ud83d\udcc4 References: <code>Library</code>, <code>Track</code></p>"},{"location":"usage/#export-the-library-tracks-playlists-to-json-file","title":"Export the library (tracks &amp; playlists) to JSON file","text":"<p>This example shows how to export your tracks and playlists as a JSON file.</p> <pre><code>import json\nimport libpybee\n\nMY_LIBRARY = libpybee.Library(\"iTunes Library.xml\")\n\n# List all tracks and playlists, convert each of them to dictionary\nexp_dict = {'Tracks': [track.to_dict() for track in MY_LIBRARY.tracks.values()],\n            'Playlists': [playlist.to_dict() for playlist in MY_LIBRARY.playlists.values()]}\n\n# Export as JSON\nwith open('lib.json', 'w', encoding='utf8') as json_file:\n    # \"default\" parameter set to `str` is mandatory to manage complex values (such as 'datetime' values and Track objects in playlists)\n    json.dump(exp_dict, json_file, indent=4, default=str) \n</code></pre> <p>\ud83d\udcc4 References: <code>Library</code>, <code>Track</code>, <code>Playlist</code></p>"},{"location":"usage/#export-all-tracks-of-a-playlist-as-a-csv-file","title":"Export all tracks of a playlist as a CSV file","text":"<p>This example shows how to all your tracks as a CSV file, considering \"Artists\" and \"Track Title\" only.</p> <pre><code>import libpybee\nimport pandas as pd\n\nMY_LIBRARY = libpybee.Library(\"iTunes Library.xml\")\n\n# Retrieve first playlist\npl_0 = list(MY_LIBRARY.playlists.values())[0]\n\n# Keep Track Artist and Title\ntracks = [{'artist': track.artist, 'title': track.title} for track in pl_0.tracks]\n\n# Export with `pandas`\npd.DataFrame(tracks).to_csv(\"playlist_0.csv\")\n</code></pre> <p>\ud83d\udcc4 References: <code>Library</code>, <code>Track</code>, <code>Playlist</code></p>"},{"location":"usage/#display-all-playlists-with-their-folder","title":"Display all playlists with their folder","text":"<p>This example shows how to iterate over all playlist folders and their playlists in the library.</p> <pre><code>import libpybee\n\nMY_LIB = libpybee.Library('iTunes Library.xml')\nfolders = MY_LIB.playlist_folders\n\nfor _, folder in folders.items():\n    print(f'FOLDER: {folder[\"folder_name\"]}')\n\n    for playlist in folder['playlists']:\n        print(playlist)\n</code></pre> <p>\ud83d\udcc4 References: <code>Library</code>, <code>Playlist</code></p>"},{"location":"references/library/","title":"Library","text":"<p>A class to store MusicBee Library information. [\u26d3\ufe0f\u200d\ud83d\udca5 Source code]</p>"},{"location":"references/library/#class-definition","title":"Class definition","text":"<pre><code>import libpybee\n\nmy_library = libpybee.Library(lib_path=\"path/to/xml_file.xml\")\nprint(my_library)\n</code></pre> Run output<pre><code>- MusicBee Library Information -\n* MusicBee Version: &lt;MusicBee Application Version&gt;\n* Library ID: &lt;Library ID&gt;\n* Library location: &lt;MusicBee Folder&gt;iTunes Music Library.xml\n* Major Version: 1\n* Minor Version: 1\n* Number of tracks: &lt;Number of tracks&gt;\n* Number of playlists: &lt;Number of playlist&gt;\n* Number of playlist folders: &lt;Number of playlist folders&gt;\n</code></pre> Parameter Type Description <code>lib_path</code> <code>str</code> Path to the MusicBee \"iTunes\" XML file"},{"location":"references/library/#class-attributes","title":"Class attributes","text":"Attributes Type Description Value by calling the constructor <code>lib_path</code> <code>str</code> Path to the MusicBee \"iTunes\" XML file <code>lib_path</code> parameter <code>app_version</code> <code>str</code> MusicBee Version XML tag <code>Application Version</code> <code>lib_id</code> <code>str</code> MusicBee Library Identifier XML tag <code>Library Persistent ID</code> <code>major_version</code> <code>int</code> \"1\" XML tag <code>Major Version</code> <code>minor_version</code> <code>int</code> \"1\" XML tag <code>Minor Version</code> <code>music_folder</code> <code>str</code> Folder where MusicBee Tracks are stored XML tag <code>Music Folder</code> with \"file://localhost/\" mention removed <code>playlist_folders</code> <code>dict</code> Dictionary registering all playlist folders in the MusicBee library Dictionary description: \"Playlist Persistent ID\" as key, <code>Playlist</code> object with other information as value <code>playlists</code> <code>dict</code> Dictionary registering all playlists in the MusicBee library Dictionary description: \"Playlist ID\" as key, <code>Playlist</code> object as value <code>tracks</code> <code>dict</code> Dictionary registering all tracks in the MusicBee library Dictionary description: \"Track ID\" as key, <code>Track</code> object as value"},{"location":"references/library/#notes","title":"Notes","text":"<p>Calling the <code>Library</code> object will immediately start retrieving all tracks and playlists from the XML file passed as a parameter.</p> <p>To date, there is 1 known problem preventing the library from loading correctly:</p> <ul> <li>A tag's value must be consistent with its type. Tags registered as \"integer\" inside the XML file (such as BPM, Track Number, Disc Count, etc.) must be filled with integers only.</li> </ul>"},{"location":"references/playlist/","title":"Playlist","text":"<p>A class to store playlist information. [\u26d3\ufe0f\u200d\ud83d\udca5 Source code]</p>"},{"location":"references/playlist/#class-definition","title":"Class definition","text":""},{"location":"references/playlist/#initialize-a-playlist-object","title":"Initialize a Playlist object","text":"<pre><code>import libpybee\n\nmy_playlist = libpybee.Playlist(p_id='Y001')\nprint(my_playlist)\n</code></pre> Run output (with ID only)<pre><code>[&lt;Playlist ID: Y001&gt;] &lt;Playlist Name: None&gt;: &lt;Number of tracks in the Playlist: 0&gt; track(s).\n</code></pre> Parameter Type Description <code>p_id</code> <code>str</code> Playlist ID. Must not be used before."},{"location":"references/playlist/#enriching-a-playlist-object","title":"Enriching a Playlist object","text":"<p>Redefine <code>name</code> and <code>n_tracks</code> attributes to output something else than <code>None</code> while calling <code>print</code> function on a playlist:</p> <pre><code>import libpybee\n\nmy_playlist_2 = libpybee.Playlist(p_id='Y002')\nmy_playlist_2.name = \"My Playlist\"\nmy_playlist_2.n_tracks = 2\n\nprint(my_playlist_2)\n</code></pre> Run output<pre><code>[Y002] My Playlist: 2 tracks\n</code></pre> <ul> <li>The same kind of manipulation can be performed to enrich the attributes listed afterward.</li> <li>That said, <code>Playlist</code> class has been designed to be used as part of a system working with <code>Library</code> and <code>Track</code> classes.</li> </ul>"},{"location":"references/playlist/#class-variable","title":"Class variable","text":"Attributes Type Description <code>all_playlists</code> <code>set</code> Set containing all playlists' ID"},{"location":"references/playlist/#class-attributes","title":"Class attributes","text":"Attributes Type Description Default value Value by calling <code>Library</code> <code>id</code> <code>str</code> Playlist Identifier - XML tag <code>Playlist ID</code> with leading (optional) zeros <code>name</code> <code>str</code> Playlist Name <code>None</code> XML tag <code>Name</code> <code>all_items</code> <code>bool</code> [Unsure] Indicates whether all the music in the playlist really exists. <code>None</code> XML tag <code>All Items</code> <code>folder_id</code> <code>str</code> Folder ID if the playlist is included in one <code>None</code> XML tag <code>Parent Persistent ID</code> <code>persistent_id</code> <code>str</code> Playlist Persistent Identifier (randomly generated string) <code>None</code> XML tag <code>Persistent ID</code> <code>tracks</code> <code>list</code> List of tracks included in the Playlist Empty list List of <code>Track</code> object based on information in <code>Playlist Items</code> XML tag <ul> <li>Attributes that can be deleted due to a lack of coherent information:<ul> <li><code>all_items</code>: Perhaps inherited from <code>libpytunes</code>? And seems to be always <code>True</code>.</li> </ul> </li> </ul>"},{"location":"references/playlist/#methods","title":"Methods","text":""},{"location":"references/playlist/#to_dict","title":"<code>to_dict</code>","text":"<p>Return all attributes (name and value) for a Playlist object as Python dictionary.</p> <pre><code>import libpybee\nimport pprint as pp\n\nmy_playlist_3 = libpybee.Playlist(t_id='BR03')\n\nmy_playlist_3.name = 'Top 10 \ud83c\udde7\ud83c\uddf7 Phonk'\nmy_playlist_3.n_tracks = 10\n\npp.pprint(my_playlist_3.to_dict())\n</code></pre> Run output<pre><code>{'all_items': None\n 'id': 'BR03'\n 'n_tracks': 10,\n 'name': 'Top 10 \ud83c\udde7\ud83c\uddf7 Phonk'\n 'persistent_id': None\n 'tracks': []}\n</code></pre>"},{"location":"references/track/","title":"Track","text":"<p>A class to store track information. [\u26d3\ufe0f\u200d\ud83d\udca5 Source code]</p>"},{"location":"references/track/#class-definition","title":"Class definition","text":""},{"location":"references/track/#initialize-a-track-object","title":"Initialize a Track object","text":"<pre><code>import libpybee\n\nmy_track = libpybee.Track(t_id='X001')\nprint(my_track)\n</code></pre> Run output (with ID only)<pre><code>[&lt;Track ID: X001&gt;] &lt;Track Artist: None&gt; - &lt;Track Title: None&gt;\n</code></pre> Parameter Type Description <code>t_id</code> <code>str</code> Track ID. Must not be used before."},{"location":"references/track/#enriching-a-track-object","title":"Enriching a Track object","text":"<p>Redefine <code>artist</code> and <code>title</code> attributes to output something else than <code>None</code> while calling <code>print</code> function on a track:</p> <pre><code>import libpybee\n\n# Simple Track constructor\nmy_track_1 = libpybee.Track(t_id='X001')\n\n# Call to Track constructor and attribute setting\nmy_track_2 = libpybee.Track(t_id='X002')\nmy_track_2.artist = 'deadmau5'\nmy_track_2.title = 'Strobe'\n\nprint(my_track_1)\nprint(my_track_2)\n</code></pre> Run output<pre><code>[X001] None - None\n[X002] deadmau5 - Strobe\n</code></pre> <ul> <li>The same kind of manipulation can be performed to enrich the attributes listed afterward.</li> <li>That said, <code>Track</code> class has been designed to be used as part of a system working with <code>Library</code> and <code>Playlist</code> classes.</li> </ul>"},{"location":"references/track/#class-variable","title":"Class variable","text":"Attributes Type Description <code>all_tracks</code> <code>set</code> Set containing all tracks' ID"},{"location":"references/track/#class-attributes","title":"Class attributes","text":"Attributes Type Description Default value Value by calling <code>Library</code> <code>id</code> <code>str</code> Track Identifier - XML tag <code>Track ID</code> with leading (optional) zeros <code>title</code> <code>str</code> Track Title <code>None</code> XML tag <code>Title</code> <code>artist</code> <code>str</code> Track Artist (Displayed Artist) <code>None</code> XML tag <code>Artist</code> <code>album</code> <code>str</code> Track Album Title <code>None</code> XML tag <code>Album</code> <code>album_artist</code> <code>str</code> Album Main Artist <code>None</code> XML tag <code>Album Artist</code> <code>album_rating</code> <code>float</code> Album Rating <code>None</code> XML tag <code>Album Rating</code> <code>artist_list</code> <code>list</code> Artists mentioned on the track (Main artists, Guests, Remixers, etc.) Empty list XML tags <code>Artist1</code>, <code>Artist2</code>, etc. or simply <code>Artist</code> tag <code>bitrate</code> <code>int</code> Track Bitrate <code>None</code> XML tag <code>Bit Rate</code> <code>bpm</code> <code>int</code> Track Tempo in Beat Per Minute <code>None</code> XML tag <code>BPM</code> <code>comments</code> <code>str</code> Track Comments <code>None</code> XML tag <code>Comment</code> <code>compilation</code> <code>bool</code> Indicate if the track is part of a compilation <code>None</code> <code>True</code> if <code>Compilation</code> XML tag exists, <code>False</code> otherwise <code>composer</code> <code>str</code> Track Composer <code>None</code> XML tag <code>Composer</code> <code>date_added</code> <code>datetime</code> Track addition date to MusicBee Library <code>None</code> XML tag <code>Date Added</code> <code>date_modified</code> <code>datetime</code> Track latest modification date in MusicBee Library <code>None</code> XML tag <code>Date Modified</code> <code>disc_count</code> <code>int</code> Amount of discs for the album <code>None</code> XML tag <code>Disc Count</code> <code>disc_number</code> <code>int</code> Disc' number in the album <code>None</code> XML tag <code>Disc Number</code> <code>encoder</code> <code>str</code> Track encoder <code>None</code> XML tag <code>Encoder</code> <code>episode_date</code> <code>datetime</code> Episode date, used for podcasts <code>None</code> XML tag <code>Episode Date</code> <code>file_location</code> <code>str</code> Track file location <code>None</code> XML tag <code>Location</code> <code>genre</code> <code>str</code> Track Genre <code>None</code> XML tags <code>Genre1</code>, <code>Genre2</code>, etc. or simply <code>Genre</code> tag <code>grouping</code> <code>list</code> Track Groups <code>None</code> XML tag <code>Grouping</code> split by \";\" <code>kind</code> <code>str</code> Track Kind <code>None</code> XML tag <code>Kind</code> <code>last_played</code> <code>datetime</code> Track latest play date in MusicBee Library <code>None</code> XML tag <code>Play Date UTC</code> <code>length</code> <code>int</code> Track Duration (in milliseconds) <code>None</code> XML tag <code>Total Time</code> <code>movement_count</code> <code>int</code> Amount of movements in the album <code>None</code> XML tag <code>Movement Count</code> <code>movement_name</code> <code>str</code> Track movement name <code>None</code> XML tag <code>Movement Name</code> <code>movement_number</code> <code>int</code> Track movement number <code>None</code> XML tag <code>Movement Number</code> <code>play_count</code> <code>int</code> Track Play Count 0 XML tag <code>Play Count</code> <code>persistent_id</code> <code>str</code> Track Persistent Identifier (randomly generated string) <code>None</code> XML tag <code>Persistent ID</code> <code>rating</code> <code>int</code> Track individual Rating <code>None</code> XML tag <code>Rating</code> <code>release_date</code> <code>str</code> Track Release Date <code>None</code> XML tag <code>Original Year</code> <code>sample_rate</code> <code>int</code> Track Sample Rate <code>None</code> XML tag <code>Sample Rate</code> <code>skip_count</code> <code>int</code> Track Skip Count 0 XML tag <code>Skip Count</code> <code>skip_date</code> <code>datetime</code> Track latest skip date in MusicBee Library <code>None</code> XML tag <code>Skip Date</code> <code>track_count</code> <code>int</code> Amount of track in the album <code>None</code> XML tag <code>Track Count</code> <code>track_number</code> <code>int</code> Track number in the album <code>None</code> XML tag <code>Track Number</code> <code>track_type</code> <code>str</code> Track Type <code>None</code> XML tag <code>Track Type</code> <code>size</code> <code>int</code> Track size (in byte) <code>None</code> XML tag <code>Size</code> <code>work</code> <code>str</code> Track Work <code>None</code> XML tag <code>Work</code> <code>year</code> <code>int</code> Track Year <code>None</code> XML tag <code>Year</code> <ul> <li>The <code>release_date</code> attribute will not be a <code>datetime</code>, since the format of \"Original Year\" tag may vary from one user to another.</li> <li>Attributes that can be deleted due to no entry available in MusicBee:<ul> <li><code>episode_date</code>: Perhaps inherited from <code>libpytunes</code>?</li> </ul> </li> </ul>"},{"location":"references/track/#methods","title":"Methods","text":""},{"location":"references/track/#to_dict","title":"<code>to_dict</code>","text":"<p>Return all attributes (name and value) for a Track object as Python dictionary.</p> <pre><code>import libpybee\nimport pprint as pp\n\nmy_track_3 = libpybee.Track(t_id='X003')\n\nmy_track_3.artist = 'Rick Astley'\nmy_track_3.title = 'Never Gonna Give You Up'\nmy_track_3.genre = 'Pop'\n\npp.pprint(my_track_3.to_dict())\n</code></pre> Run output<pre><code>{'album': None\n ...\n 'artist': 'Rick Astley',\n ...\n 'genre': 'Pop',\n ...\n 'id': 'X003',\n ...\n 'year': None}\n</code></pre>"}]}